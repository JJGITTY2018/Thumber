DROP DATABASE IF EXISTS thumblr;
CREATE DATABASE thumblr;

\c thumblr

CREATE TABLE USERS (
  id SERIAL PRIMARY KEY NOT NULL,
  username VARCHAR NOT NULL UNIQUE,
  email VARCHAR NOT NULL UNIQUE,
  password_salt VARCHAR,
  last_login TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  created_on DATE NOT NULL DEFAULT NOW()
);

CREATE TABLE profile
(
  id SERIAL PRIMARY KEY NOT NULL,
  user_id INT UNIQUE NOT NULL REFERENCES USERS(id) ON DELETE CASCADE,
  profileURL VARCHAR,
  headerURL VARCHAR,
  firstName VARCHAR,
  lastName VARCHAR
);

CREATE TABLE following
(
  id SERIAL PRIMARY KEY NOT NULL,
  follower_id INT NOT NULL REFERENCES USERS(id),
  following_id INT NOT NULL REFERENCES USERS(id) ON DELETE SET NULL

);

CREATE TABLE TAGS (
  id SERIAL PRIMARY KEY NOT NULL,
  tag_name VARCHAR NOT NULL

);

CREATE TABLE POSTS (
  id SERIAL PRIMARY KEY NOT NULL,
  post_type VARCHAR NOT NULL DEFAULT ('TEXT'),
  text_title VARCHAR NOT NULL,
  text_body TEXT,
  author_id INT NOT NULL REFERENCES USERS(id) ON DELETE CASCADE,
  reblog_id INT REFERENCES POSTS(id) ON DELETE SET NULL,
  publish_date TIMESTAMP DEFAULT NOW(),
  video_url VARCHAR,
  video_caption VARCHAR,
  video_source VARCHAR,
  audio_url VARCHAR,
  audio_caption VARCHAR,
  audio_source VARCHAR,
  quote_text VARCHAR,
  quote_source VARCHAR,
  link_url VARCHAR
);

CREATE TABLE POST_TAG
(
id SERIAL PRIMARY KEY NOT NULL,
post_id INT REFERENCES POSTS(id) ON DELETE CASCADE,
tag_id INT REFERENCES TAGS(id) ON DELETE CASCADE
);

CREATE TABLE LIKES 
(
  id SERIAL PRIMARY KEY NOT NULL,
  post_id INT REFERENCES POSTS(id) ON DELETE CASCADE,
  user_id INT REFERENCES USERS(id) ON DELETE CASCADE
);

CREATE TABLE images 
(
  id SERIAL PRIMARY KEY NOT NULL,
  uploader_id INT REFERENCES USERS(id) ON DELETE CASCADE,
  image_url VARCHAR NOT NULL
);